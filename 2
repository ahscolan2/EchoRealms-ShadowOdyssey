// EchoRealms: Shadow Odyssey - Polishing pass 2
// Tuning movement feel, adding audio mixing, improving doors/keys logic, adding checkpoint system.

// Checkpoint object
class Checkpoint extends Phaser.GameObjects.Rectangle {
  constructor(scene, x, y) {
    super(scene, x, y, 18, 28, 0x2ecc71, 0.6);
    scene.add.existing(this);
    scene.physics.add.existing(this, true);
    this.activated = false;
  }
  activate() {
    if (this.activated) return;
    this.activated = true;
    this.setFillStyle(0x27ae60, 0.9);
    this.scene.sound.play('sfx_switch', { detune: 200, volume: 0.4 });
  }
}

// Extend MainScene with more systems
if (typeof MainScene !== 'undefined') {
  Phaser.Utils.Objects.Extend(true, MainScene.prototype, {
    createAudio() {
      this.sfx = {
        jump: this.sound.add('sfx_jump'),
        dash: this.sound.add('sfx_dash'),
        pick: this.sound.add('sfx_pick'),
        switch: this.sound.add('sfx_switch'),
        hurt: this.sound.add('sfx_hurt'),
      };
      this.sound.setVolume(0.8);
    },

    installKeyDoorRules() {
      // If a door requires a key, spend key on contact
      this.physics.add.overlap(this.player, this.doorsGroup, (p, d) => {
        if (!d.opened && this.player.inventory.keys > 0) {
          this.player.inventory.keys--;
          this.events.emit('ui:inventory', this.player.inventory);
          d.open();
        }
      });
    },

    createCheckpoints() {
      this.checkpoints = this.physics.add.group();
      const cp1 = new Checkpoint(this, 640, 520);
      this.checkpoints.add(cp1);
      this.physics.add.overlap(this.player, this.checkpoints, (p, cp) => {
        if (!cp.activated) {
          cp.activate();
          this.lastCheckpoint = new Phaser.Math.Vector2(cp.x, cp.y - 30);
        }
      });
    },

    // Hook into existing create after buildLevel
    create() {
      // call original
      const orig = Object.getPrototypeOf(MainScene.prototype).create || Phaser.Scene.prototype.create;
      // But we can't easily call orig; assume create already ran in loaded script
    },

    // Utility to rebuild doors group colliders
    rebuildDoorColliders() {
      if (this.doorsGroup) this.doorsGroup.clear(true, true);
      this.doorsGroup = this.physics.add.staticGroup();
      this.doors.forEach(d => this.doorsGroup.add(d));
    },

    // Override buildLevel to add grouping and extra set pieces
    buildLevelExtra(id) {
      // Small moving platform example (simple tweened platform)
      const moving = this.platforms.create(1500, 460, 'platform');
      moving.refreshBody();
      this.tweens.add({ targets: moving, x: 1680, duration: 2400, yoyo: true, repeat: -1, ease: 'Sine.inOut' });
    },

    applyPolish() {
      // Slight camera deadzone for nicer movement
      this.cameras.main.setDeadzone(120, 120);
      // Add vignette overlay
      const g = this.add.graphics().setScrollFactor(0);
      g.fillStyle(0x000000, 0.35);
      g.fillRoundedRect(-20, -20, 860, 660, 32);
      g.setDepth(1000);
      this.time.delayedCall(50, () => g.setAlpha(0.2));
    },

    // Hook after original scene init
    postInitEnhancements() {
      if (!this.sfx) this.createAudio();
      this.rebuildDoorColliders();
      this.installKeyDoorRules();
      this.createCheckpoints();
      this.buildLevelExtra(this.level);
      this.applyPolish();
    }
  });
}

// If scene exists, run enhancements when DOM ready-ish; else export for bundlers
(function attachEnhancements() {
  try {
    if (typeof game !== 'undefined') {
      const scene = game.scene.keys['MainScene'];
      if (scene && !scene.__polished) {
        scene.__polished = true;
        scene.postInitEnhancements();
        // Patch onPlayerDeath to respawn at checkpoint if available
        const origDeath = scene.onPlayerDeath.bind(scene);
        scene.onPlayerDeath = () => {
          // custom respawn using checkpoint
          scene.physics.pause();
          const overlay = scene.add.rectangle(scene.cameras.main.worldView.centerX, scene.cameras.main.worldView.centerY, 320, 120, 0x000000, 0.6).setOrigin(0.5);
          const t = scene.add.text(scene.cameras.main.worldView.centerX, scene.cameras.main.worldView.centerY, 'Shadows took you...\nPress R to respawn', { fontFamily: 'monospace', fontSize: 18, color: '#f88', align: 'center' }).setOrigin(0.5);
          scene.input.keyboard.once('keydown-R', () => {
            overlay.destroy(); t.destroy();
            scene.physics.resume();
            const pt = scene.lastCheckpoint || new Phaser.Math.Vector2(80, 460);
            scene.player.setPosition(pt.x, pt.y);
            scene.player.health = scene.player.maxHealth;
            scene.events.emit('player:health', scene.player.health, scene.player.maxHealth);
          });
        };
      }
    }
  } catch (e) {
    console.warn('Enhancement attach failed', e);
  }
})();
